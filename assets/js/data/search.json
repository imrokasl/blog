[ { "title": "Why Google Pixel (and iPhone) Set the Standard for secure Smartphones", "url": "/posts/pixel-security/", "categories": "security, MTE, GrapheneOS", "tags": "security", "date": "2024-12-03 20:30:00 +0800", "snippet": "1. Security &amp; OTA UpdatesRecent Pixel phones come with a minimum guaranteed 7 years of security updates. iPhones offer a similar level of support, although Apple does not specify the exact dura...", "content": "1. Security &amp; OTA UpdatesRecent Pixel phones come with a minimum guaranteed 7 years of security updates. iPhones offer a similar level of support, although Apple does not specify the exact duration. It can be assumed that Apple’s timeline is comparable to Google’s. Many people point out that other manufacturers have started to increase their phone support timelines. For example, Samsung has matched Google’s 7 years of security updates.On paper, this sounds excellent, but it’s important to remember that timely updates are just as crucial as a long support period. Samsung and other phone manufacturers often neglect this aspect, especially Chinese brands, which typically offer only 1–2 years of updates. Even these updates are sometimes delayed, arriving up to a year late.Samsung has consistently shifted its older devices to less frequent security backport releases. These backports include only High/Critical severity patches, ignoring the majority of Low/Moderate severity fixes. Instead of providing monthly or quarterly updates with broader improvements, Samsung opts for yearly releases, which are often delayed.While Samsung is far from the worst offender—other OEMs struggle to match even Samsung’s efforts, and Samsung only really does it decently for the flagships.In essence, Pixels are essentially the only Android devices consistently shipping monthly and quarterly Android updates. Other manufacturers typically release an initial yearly update, then apply over a year of Android Security Bulletin (ASB) backports. This is often followed by a significantly delayed update to a new yearly Android version.As competent as Google appears, they inadvertently help mask other manufacturers’ shortcomings by not distinguishing Android releases with specific names, unlike how Apple names IOS versions. For example, Android 14 was officially released in October 2023. The update in November could have been labeled Android 14.0.1, with Android 14 QPR1 in December designated as Android 14.1. However, Google avoids such versioning, likely because it would highlight how poor update practices are for non-Pixel Android devices.Google doesn’t present monthly and quarterly updates in a particularly user-facing way, leading to confusion. Many users mistake monthly updates for incomplete ASB backports. Additionally, Google brands its quarterly updates and accompanying app improvements as “Pixel Feature Drops” in their marketing, further obfuscating the nature of these updates.2. MTEMTE is quite a new feature in the smartphone world or in any consumer device for that matter. It’s not enabled by default on stock Pixel devices and is not available on iPhone as of writing this. So I am going to talk about it in relation to GrapheneOS because it’s the only OS with proper memory tagging implementation.Pixels have unique support for hardware memory tagging which GrapheneOS is the first to be deploying in production for all the base OS processes, including apps and the browser/WebView. Doing the same elsewhere would have 100% CPU overhead (i.e., everything taking around 2x as long) and also massive memory overhead (around 25%). That’s based on the cost of HWASan, which is memory tagging without the ARM MTE extension.Pixel 8 and Pixel 8 Pro are ARMv9 devices supporting hardware memory tagging. Stock OS currently has a very primitive experimental implementation available as a developer option. Hardware memory tagging is going to provide a massive increase to protection against remote exploitation. MTE already started uncovering High severity vulnerabilities like CVE-2024-23694 Bluetooth issue found with memory tagging which Google assigned a High severity.Initial hardened_malloc implementation sets random tags for each 128k byte and below allocation. It excludes tags of adjacent allocations and reserves a tag for free allocations. It fully prevents sequential overflows as a vulnerability class, and freed memory can’t be accessed.Use-after-free is detected until another allocation is made in the same slot with the same random tag chosen for it. hardened_malloc already defends this by quarantining freed allocations by default. They go through a First-In-First-Out ring buffer and a swap with a random array.Arbitrary read/write via buffer overflows are caught by the random tags. They’re unfortunately currently only 4-bit, but a future architecture revision could raise them to 8-bit. CFI, PAC, etc., only try to defend specific targets and don’t work well against arbitrary read/write.Nearly all remote code execution vulnerabilities in the OS are memory corruption bugs: either use-after-free or buffer overflows. The majority involve the malloc heap, and the rest mostly involve the stack, which could also use MTE-based defenses to replace SSP + ShadowCallStack.Most apps are a similar story as the base OS. Chromium has pervasive type confusion bugs which MTE doesn’t explicitly protect against, but CFI and PartitionAlloc already do. Vanadium already has CFI enabled, unlike Android Chrome.4. Titan MAndroid has traditionally had a TEE (TrustZone)-based keystore. TrustZone stores data by encrypting it with a hardware-bound key only usable by it, and stores the data via the OS. Most implementations ended up adding Replay Protected Memory Block support for reliable deletion.Pixel 2 added a secure element, which was only used for the Weaver hardware-based encryption throttling feature, which quickly ramps up to 1 day between each key derivation attempt.They planned more but it didn’t ship until later Pixels. Pixel 2 secure element was also meant to be used for verified boot state (custom key, rollback indexes). They ended up using the Qualcomm TEE (QSEE) with Replay Protected Memory Block for this, and that was still the only keystore implementation at that point. Weaver and the authentication for firmware updates are still used on modern Pixels. Pixel 2 secure element was an off-the-shelf NXP Java smartcard chip. Pixel 3 replaced it with Titan M which was a custom chip based on an ARM Cortex secure element. It added a lot more features. In each Pixel gen, they improved Titan M. Pixel 6 moved from ARM Cortex secure element to RISC-V one based on OpenTitan.Most Android phones lack secure elements entirely, meaning none of these features are present. They typically rely only on the traditional TEE-based keystore with older keymaster/attestation API versions. The Pixel 6, however, uses Trusty OS for TEE and ‘secure core’ on the SoC, with the secure element being OpenTitan-based.Samsung flagships are an exception, but they do not allow alternate operating systems to fully utilize their hardware security features. Pixels are the only devices that incorporate all these security features and permit more secure operating systems, such as GrapheneOS, to access them. This gives Pixels an advantage over Samsung flagship security—even without considering the significant attack surface Samsung introduces with their customized AOSP forks.How Titan M WorksPixel devices leverage Titan M, a secure element, to enhance Android’s filesystem-based encryption, ensuring robust protection for user data. Files are encrypted using AES-256-XTS for content and AES-256-CTS for filenames, with unique keys derived for each file using HKDF-SHA512. Disk encryption keys are securely stored and encrypted, with Titan M playing a critical role in managing the “Weaver token,” a component used in key derivation. This token, combined with a password-derived key, is stored in the secure element and requires correct credentials to access. Titan M enforces delays for failed login attempts to prevent brute force attacks, escalating from no delay initially to a 1-day lockout after 140 attempts.How the Delays Are Calculated: 0 to 4 failed attempts: no delay 5 failed attempts: 30-second delay 6 to 9 failed attempts: no delay 10 to 29 failed attempts: 30-second delay 30 to 139 failed attempts: 30 × 2⌊(n - 30) ÷ 10⌋, where n is the number of failed attempts. Example: 30 failed attempts = 30s delay 40 failed attempts = 60s delay 50 failed attempts = 120s delay 60 failed attempts = 240s delay 70 failed attempts = 480s delay, etc. 140 or more failed attempts: 86400-second delay (1 day)Titan M also supports secure data wiping by erasing associated Weaver slots when profiles are deleted or the device undergoes a factory reset. Additionally, Titan M prevents unauthorized firmware updates, protecting against insider attacks and ensuring the integrity of the device’s encryption and security processes. This hardware integration provides a layered defense, securing sensitive data even against sophisticated threats.PS. I don’t mention iPhone a lot in this article because I don’t know much about it in particular, but I know enough to know that it follows roughly the same standards as Google." } ]
